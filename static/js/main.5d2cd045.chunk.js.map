{"version":3,"sources":["Cartsummary.js","Navigation.js","Categories.js","Products.js","Cart.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Cartsummary","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","this","props","Cart","length","DropdownMenu","right","map","selectedProduct","DropdownItem","key","id","productName","Badge","color","quantity","onClick","deleteAll","divider","Reset","to","Button","className","outline","totalPrice","NavbarText","fullCart","emptyCart","Component","Navigation","toggle","bind","state","isOpen","navCollapsed","showNavbar","setState","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","Categories","getCategories","fetch","then","response","json","data","title","ListGroup","Category","ListGroupItem","tiklandiginda","active","categoryName","selectedCategory","Products","Table","products","product","scope","unitPrice","quantityPerUnit","unitsInStock","addToCart","striped","selectedItem","categoryId","total","NotFound","App","getProducts","url","Categori","addedProduct","find","c","concat","alertify","success","notDeleted","filter","setTimeout","error","confirmAlert","message","buttons","label","forEach","perPrice","Container","Row","Col","xl","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uXAgEeA,E,mLAlDD,IAAD,OACT,OACE,kBAACC,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,YAEE,6BACCC,KAAKC,MAAMC,KAAKC,QAEnB,kBAACC,EAAA,EAAD,CAAcC,OAAK,GAChBL,KAAKC,MAAMC,KAAKI,KAAI,SAAAC,GACnB,OACE,kBAACC,EAAA,EAAD,CAAcC,IAAKF,EAAgBG,IAChCH,EAAgBI,YACjB,mCACA,kBAACC,EAAA,EAAD,CAAOC,MAAM,WAAWN,EAAgBO,UACxC,mCACA,kBAACF,EAAA,EAAD,CACEG,QAAS,kBAAM,EAAKd,MAAMe,UAAUT,IACpCM,MAAM,UAFR,SASN,kBAACL,EAAA,EAAD,CAAcS,SAAO,IACrB,kBAACT,EAAA,EAAD,CAAcO,QAAS,kBAAM,EAAKd,MAAMiB,UACtC,kBAACN,EAAA,EAAD,CAAOC,MAAM,UAAb,sBAEF,kBAACL,EAAA,EAAD,CAAcS,SAAO,IACrB,kBAAC,IAAD,CAAME,GAAG,SACP,kBAACC,EAAA,EAAD,CAAQP,MAAM,UAAUQ,UAAU,OAAOC,SAAO,EAACP,QAAS,kBAAI,EAAKd,MAAMsB,eAAzE,2B,kCAQR,OAAO,kBAACC,EAAA,EAAD,sB,+BAIP,OACE,6BACGxB,KAAKC,MAAMC,KAAKC,OAAS,EAAIH,KAAKyB,WAAazB,KAAK0B,iB,GA9CnCC,aC2CXC,E,YAzCb,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAED4B,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,CACXC,QAAQ,EACRC,cAAc,EACdC,YAAY,GAPG,E,sEAWjBlC,KAAKmC,SAAS,CACZH,QAAShC,KAAK+B,MAAMC,W,+BAKtB,OACE,6BACE,kBAACI,EAAA,EAAD,CAAQvB,MAAM,QAAQwB,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAI,wCACtB,kBAACC,EAAA,EAAD,CAAe1B,QAASf,KAAK6B,SAC7B,kBAACa,EAAA,EAAD,CAAUV,OAAQhC,KAAK+B,MAAMC,OAAQW,QAAM,GACzC,kBAACC,EAAA,EAAD,CAAKvB,UAAU,UAAUsB,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASN,KAAK,KAAd,cAEF,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASN,KAAK,uCAAd,WAIF,kBAAC,EAAD,CAAatC,KAAMF,KAAKC,MAAMC,KAAMc,UAAWhB,KAAKC,MAAMe,UAAWE,MAAOlB,KAAKC,MAAMiB,MAAOK,WAAYvB,KAAKC,MAAMsB,qB,GAjC1GI,a,gBCqBVoB,E,2MA/BbhB,MAAQ,CACNgB,WAAY,I,EAMdC,cAAgB,WACdC,MAAM,oCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKlB,SAAS,CAAEY,WAAYM,Q,mFAN5CrD,KAAKgD,kB,+BASG,IAAD,OACP,OACE,6BACE,4BAAKhD,KAAKC,MAAMqD,MAAhB,KACA,kBAACC,EAAA,EAAD,KACGvD,KAAK+B,MAAMgB,WAAWzC,KAAI,SAAAkD,GACzB,OACE,kBAACC,EAAA,EAAD,CAAehD,IAAK+C,EAAS9C,GAAIK,QAAS,kBAAM,EAAKd,MAAMyD,cAAcF,IAAWG,OAAQH,EAASI,eAAe,EAAK3D,MAAM4D,kBAC5HL,EAASI,uB,GAtBDjC,a,QCwCVmC,E,iLAvCH,IAAD,OACP,OACE,6BACE,4BACG9D,KAAKC,MAAMqD,MADd,KACuBtD,KAAKC,MAAM4D,kBAGlC,kBAACE,EAAA,EAAD,KACE,+BACE,4BACE,iCACA,4CACA,0CACA,iDACA,gDAGJ,+BACG/D,KAAKC,MAAM+D,SAAS1D,KAAI,SAAA2D,GACvB,OACE,wBAAIxD,IAAKwD,EAAQvD,IACf,wBAAIwD,MAAM,OAAOD,EAAQvD,IACzB,4BAAKuD,EAAQtD,aACb,4BAAKsD,EAAQE,WACb,4BAAKF,EAAQG,iBACb,4BAAKH,EAAQI,cACb,wBAAItD,QAAS,kBAAM,EAAKd,MAAMqE,UAAUL,KACtC,kBAAC7C,EAAA,EAAD,CAAQP,MAAM,WAAd,mB,GA5BGc,a,oDCAFzB,E,iLAET,IAAD,OACP,OACE,6BACE,kBAAC6D,EAAA,EAAD,CAAOQ,SAAO,GACZ,+BACE,4BACE,iCACA,2CACA,4CACA,0CACA,0CAGJ,+BACGvE,KAAKC,MAAMC,KAAKI,KAAI,SAAAkE,GACnB,OACE,wBAAI/D,IAAK+D,EAAa9D,IACpB,4BAAK8D,EAAa9D,IAClB,4BAAK8D,EAAaC,YAClB,4BAAKD,EAAa7D,aAClB,4BAAK6D,EAAaL,WAClB,4BAAKK,EAAa1D,UAClB,4BACE,kBAACM,EAAA,EAAD,CAAQP,MAAM,SAASE,QAAS,kBAAI,EAAKd,MAAMe,UAAUwD,KAAzD,gBAMV,6CAAmBxE,KAAKC,MAAMyE,a,GA/BN/C,aCDbgD,E,iLAEb,OACI,+C,GAH0BhD,a,QCmKvBiD,E,2MAzJb7C,MAAQ,CACN8B,iBAAkB,GAClBG,SAAU,GACV9D,KAAM,GACNwE,MAAM,G,EAORG,YAAc,SAAAJ,GACZ,IAAIK,EAAM,iCACNL,IACFK,GAAO,eAAiBL,GAE1BxB,MAAM6B,GACH5B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKlB,SAAS,CAAE6B,SAAUX,Q,EAG5CK,cAAgB,SAAAqB,GACd,EAAKF,YAAYE,EAASrE,IAC1B,EAAKyB,SAAS,CACZ0B,iBAAkBkB,EAASnB,gB,EAK/BU,UAAY,SAAAL,GAEV,IAAM/D,EAAO,EAAK6B,MAAM7B,KAClB8E,EAAe9E,EAAK+E,MAAK,SAAAC,GAC7B,OAAOA,EAAExE,KAAOuD,EAAQvD,MAEtBsE,GACFA,EAAalE,UAAY,EACzB,EAAKqB,SAAS,CAAEjC,KAAMA,KAEtB,EAAKiC,SAAS,CACZjC,KAAM,YAAIA,GAAMiF,OAAV,eAAsBlB,EAAtB,CAA+BnD,SAAU,OAGnDsE,IAASC,QAAQpB,EAAQtD,YAAc,yB,EAKzCK,UAAY,SAAAiD,GACV,IAAMqB,EAAa,EAAKvD,MAAM7B,KAAKqF,QAAO,SAAAL,GACxC,OAAOA,EAAExE,KAAOuD,EAAQvD,MAExB,EAAKyB,SAAS,CACZuC,MAAM,EACNxE,KAAMoF,IAERE,YAAW,WACP,EAAKjE,eACR,GACD6D,IAASK,MAAM,OAAUxB,EAAQtD,YAAc,4B,EAGnDO,MAAQ,WACNwE,uBAAa,CACXpC,MAAO,8CACPqC,QAAS,4BACTC,QAAS,CACP,CACEC,MAAO,MACP9E,QAAS,WACP,EAAKoB,SAAS,CACZjC,KAAK,GACLwE,MAAM,MAIZ,CACEmB,MAAO,KACP9E,QAAS,WACP,EAAKoB,SAAS,CACZjC,KAAK,EAAK6B,MAAM7B,a,EAQ5BqB,WAAa,WACX,IAAImD,EAAM,EACV,EAAK3C,MAAM7B,KAAK4F,SAAQ,SAAAtB,GACtB,IAAI1D,EAAW0D,EAAa1D,SACxBiF,EAAWvB,EAAaL,UAC5B,EAAKhC,SAAS,CACZuC,MAAMA,GAAO5D,EAAUiF,Q,mFAtF3B/F,KAAK6E,gB,+BA2FG,IAAD,OACP,OACE,6BACE,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,kBAAC,EAAD,CACE7C,MAAM,aACNpD,KAAMF,KAAK+B,MAAM7B,KACjBc,UAAWhB,KAAKgB,UAChBE,MAAOlB,KAAKkB,MACZK,WAAYvB,KAAKuB,eAIvB,kBAAC0E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CACE7C,MAAM,aACNI,cAAe1D,KAAK0D,cACpBG,iBAAkB7D,KAAK+B,MAAM8B,oBAGjC,kBAACqC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,WACLC,UAAW,kBACT,kBAAC,EAAD,CACEhD,MAAM,WACNO,iBAAkB,EAAK9B,MAAM8B,iBAC7BG,SAAU,EAAKjC,MAAMiC,SACrBM,UAAW,EAAKA,eAItB,kBAAC,IAAD,CACE8B,OAAK,EACLC,KAAK,gBACLC,UAAW,kBACT,kBAAC,EAAD,CAAMpG,KAAM,EAAK6B,MAAM7B,KAAMoE,UAAW,EAAKA,UAAWI,MAAO,EAAK3C,MAAM2C,MAAO1D,UAAW,EAAKA,eAGrG,kBAAC,IAAD,CAAOsF,UAAW3B,a,GAhJhB4B,IAAM5E,WCCJ6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,MAAK,SAAAkE,GACjCA,EAAaC,kB","file":"static/js/main.5d2cd045.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Badge,\r\n  NavbarText,\r\n  NavLink,\r\n  Button\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Cartsummary extends Component {\r\n  fullCart() {\r\n    return (\r\n      <UncontrolledDropdown nav inNavbar>\r\n        <DropdownToggle nav caret>\r\n          Your Cart\r\n          <br></br>\r\n          {this.props.Cart.length}\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {this.props.Cart.map(selectedProduct => {\r\n            return (\r\n              <DropdownItem key={selectedProduct.id}>\r\n                {selectedProduct.productName}\r\n                <span> </span>\r\n                <Badge color=\"warning\">{selectedProduct.quantity}</Badge>\r\n                <span> </span>\r\n                <Badge\r\n                  onClick={() => this.props.deleteAll(selectedProduct)}\r\n                  color=\"danger\"\r\n                >\r\n                  X\r\n                </Badge>\r\n              </DropdownItem>\r\n            );\r\n          })}\r\n          <DropdownItem divider />\r\n          <DropdownItem onClick={() => this.props.Reset()}>\r\n            <Badge color=\"danger\">Reset Your Cart !</Badge>\r\n          </DropdownItem>\r\n          <DropdownItem divider />\r\n          <Link to=\"/cart\">   \r\n            <Button color=\"primary\" className=\"ml-2\" outline onClick={()=>this.props.totalPrice()}> Go to Your Cart! </Button>\r\n          </Link>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n    );\r\n  }\r\n\r\n  emptyCart() {\r\n    return <NavbarText>Empty Cart!</NavbarText>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.Cart.length > 0 ? this.fullCart() : this.emptyCart()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Cartsummary;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  \r\n} from \"reactstrap\";\r\nimport Cartsummary from \"./Cartsummary\";\r\n\r\n\r\nclass Navigation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false,\r\n      navCollapsed: true,\r\n      showNavbar: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\"><h2>easyBUY</h2></NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink href=\"/\">Home Page</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/ilydcndr/easyBuy\">\r\n                  GitHub\r\n                </NavLink>\r\n              </NavItem>\r\n              <Cartsummary Cart={this.props.Cart} deleteAll={this.props.deleteAll} Reset={this.props.Reset} totalPrice={this.props.totalPrice}/>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nclass Categories extends Component {\r\n  state = {\r\n    Categories: []\r\n  };\r\n  componentDidMount() {\r\n    this.getCategories();\r\n  }\r\n\r\n  getCategories = () => {\r\n    fetch(\"http://localhost:3000/categories\")\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ Categories: data }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.props.title} </h2>\r\n        <ListGroup>\r\n          {this.state.Categories.map(Category => {\r\n            return (\r\n              <ListGroupItem key={Category.id} onClick={() => this.props.tiklandiginda(Category)} active={Category.categoryName===this.props.selectedCategory?true:false}>\r\n                {Category.categoryName}\r\n              </ListGroupItem>\r\n            );\r\n          })}\r\n        </ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Categories;\r\n","import React, { Component } from \"react\";\r\nimport { Table, Button } from \"reactstrap\";\r\n\r\nclass Products extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>\r\n          {this.props.title}--{this.props.selectedCategory}\r\n        </h2>\r\n\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Product Name</th>\r\n              <th>Unit Price</th>\r\n              <th>Quantity Per Unit</th>\r\n              <th>Units In Stock</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map(product => {\r\n              return (\r\n                <tr key={product.id}>\r\n                  <th scope=\"row\">{product.id}</th>\r\n                  <td>{product.productName}</td>\r\n                  <td>{product.unitPrice}</td>\r\n                  <td>{product.quantityPerUnit}</td>          \r\n                  <td>{product.unitsInStock}</td>\r\n                  <td onClick={() => this.props.addToCart(product)}>\r\n                    <Button color=\"success\">Add</Button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Products;\r\n","import React, { Component } from \"react\";\r\nimport { Table, Button } from \"reactstrap\";\r\n\r\nexport default class Cart extends Component {\r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Table striped>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Category Id</th>\r\n              <th>Product Name</th>\r\n              <th>Unit Price</th>\r\n              <th>Quantity</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.Cart.map(selectedItem => {\r\n              return (\r\n                <tr key={selectedItem.id}>\r\n                  <td>{selectedItem.id}</td>\r\n                  <td>{selectedItem.categoryId}</td>\r\n                  <td>{selectedItem.productName}</td>\r\n                  <td>{selectedItem.unitPrice}</td>\r\n                  <td>{selectedItem.quantity}</td>\r\n                  <td>\r\n                    <Button color=\"danger\" onClick={()=>this.props.deleteAll(selectedItem)}>Delete</Button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n          <tr> Total Price: {this.props.total}</tr>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Not Found!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport Categories from \"./Categories\";\nimport Products from \"./Products\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport alertify from \"alertifyjs\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Cart from \"./Cart\";\nimport NotFound from \"./NotFound\";\nimport { confirmAlert } from 'react-confirm-alert';\n\nclass App extends React.Component {\n  state = {\n    selectedCategory: \"\",\n    products: [],\n    Cart: [],\n    total:0\n  };\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n  getProducts = categoryId => {\n    let url = \"http://localhost:3000/products\";\n    if (categoryId) {\n      url += \"?categoryId=\" + categoryId;\n    }\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ products: data }));\n  };\n\n  tiklandiginda = Categori => {\n    this.getProducts(Categori.id);\n    this.setState({\n      selectedCategory: Categori.categoryName\n    });\n  };\n\n  /**ayni üründen 2 kere eklediğimde sepet toplam sayısında gözükmesin o ürünün quantity değeri artsın yani sepete girince görüntüleyelim */\n  addToCart = product => {\n   \n    const Cart = this.state.Cart;\n    const addedProduct = Cart.find(c => {\n      return c.id === product.id;\n    });\n    if (addedProduct) {\n      addedProduct.quantity += 1;\n      this.setState({ Cart: Cart });\n    } else {\n      this.setState({\n        Cart: [...Cart].concat({ ...product, quantity: 1 })\n      });\n    }\n    alertify.success(product.productName + \" \" + \"added to your Cart!\");\n    \n  };\n\n\n  deleteAll = product=> {\n    const notDeleted = this.state.Cart.filter(c => {\n      return c.id !== product.id;\n    }); \n      this.setState({\n        total:0,\n        Cart: notDeleted\n      });\n      setTimeout(() => {\n          this.totalPrice() \n    }, 1)\n      alertify.error(\"All\"+\" \"+product.productName + \" \" + \"Deleted From Your Cart\")\n  };\n\n  Reset = () => {\n    confirmAlert({\n      title: <h1>Are You Sure ?</h1>,\n      message: 'You Will Reset Your Cart!',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            this.setState({\n              Cart:[],\n              total:0\n            })\n          }\n        },\n        {\n          label: 'No',\n          onClick: () => {\n            this.setState({\n              Cart:this.state.Cart\n            })\n          }\n        }\n      ]\n    });\n  };\n\n  totalPrice = () => {\n    let total=0\n    this.state.Cart.forEach(selectedItem => {\n      let quantity = selectedItem.quantity;\n      let perPrice = selectedItem.unitPrice;\n      this.setState({\n        total:total+=quantity *perPrice\n      });\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col xl=\"12\">\n              <Navigation\n                title=\"Navigation\"\n                Cart={this.state.Cart}\n                deleteAll={this.deleteAll}\n                Reset={this.Reset}\n                totalPrice={this.totalPrice}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col xl=\"4\">\n              <Categories\n                title=\"Categories\"\n                tiklandiginda={this.tiklandiginda}\n                selectedCategory={this.state.selectedCategory}\n              />\n            </Col>\n            <Col xl=\"8\">\n              <Switch>\n                <Route\n                  exact\n                  path=\"/easyBuy\"\n                  component={() => (\n                    <Products\n                      title=\"Products\"\n                      selectedCategory={this.state.selectedCategory}\n                      products={this.state.products}\n                      addToCart={this.addToCart}\n                    />\n                  )}\n                ></Route>\n                <Route\n                  exact\n                  path=\"/easyBuy/cart\"\n                  component={() => (\n                    <Cart Cart={this.state.Cart} addToCart={this.addToCart} total={this.state.total} deleteAll={this.deleteAll}/>\n                  )}\n                ></Route>\n                <Route component={NotFound}></Route>\n              </Switch>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"alertifyjs/build/css/alertify.min.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}